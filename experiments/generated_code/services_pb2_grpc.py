# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated_code.services_pb2 as services__pb2


class CommunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PingPong = channel.stream_stream(
                '/Communicator/PingPong',
                request_serializer=services__pb2.Ping.SerializeToString,
                response_deserializer=services__pb2.Ping.FromString,
                )
        self.ExchangeBinarizedDataUnaryUnary = channel.unary_unary(
                '/Communicator/ExchangeBinarizedDataUnaryUnary',
                request_serializer=services__pb2.SafetensorDataProto.SerializeToString,
                response_deserializer=services__pb2.SafetensorDataProto.FromString,
                )
        self.ExchangeNumpyDataUnaryUnary = channel.unary_unary(
                '/Communicator/ExchangeNumpyDataUnaryUnary',
                request_serializer=services__pb2.TensorProto.SerializeToString,
                response_deserializer=services__pb2.TensorProto.FromString,
                )
        self.ExchangeBinarizedDataStreamUnary = channel.stream_unary(
                '/Communicator/ExchangeBinarizedDataStreamUnary',
                request_serializer=services__pb2.SafetensorDataProto.SerializeToString,
                response_deserializer=services__pb2.SafetensorDataProto.FromString,
                )
        self.ExchangeNumpyDataStreamUnary = channel.stream_unary(
                '/Communicator/ExchangeNumpyDataStreamUnary',
                request_serializer=services__pb2.TensorProto.SerializeToString,
                response_deserializer=services__pb2.TensorProto.FromString,
                )
        self.ExchangeBinarizedDataStreamStream = channel.stream_stream(
                '/Communicator/ExchangeBinarizedDataStreamStream',
                request_serializer=services__pb2.SafetensorDataProto.SerializeToString,
                response_deserializer=services__pb2.SafetensorDataProto.FromString,
                )
        self.ExchangeNumpyDataStreamStream = channel.stream_stream(
                '/Communicator/ExchangeNumpyDataStreamStream',
                request_serializer=services__pb2.TensorProto.SerializeToString,
                response_deserializer=services__pb2.TensorProto.FromString,
                )


class CommunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PingPong(self, request_iterator, context):
        """Bidirectional ping-pong to keep the connection alive
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeBinarizedDataUnaryUnary(self, request, context):
        """Custom serialization of the tensors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeNumpyDataUnaryUnary(self, request, context):
        """Proto serialization of the tensors (converted to numpy)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeBinarizedDataStreamUnary(self, request_iterator, context):
        """For large client messages:
        Custom serialization of the tensors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeNumpyDataStreamUnary(self, request_iterator, context):
        """Proto serialization of the tensors (converted to numpy)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeBinarizedDataStreamStream(self, request_iterator, context):
        """For large client and server messages:
        Custom serialization of the tensors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeNumpyDataStreamStream(self, request_iterator, context):
        """Proto serialization of the tensors (converted to numpy)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PingPong': grpc.stream_stream_rpc_method_handler(
                    servicer.PingPong,
                    request_deserializer=services__pb2.Ping.FromString,
                    response_serializer=services__pb2.Ping.SerializeToString,
            ),
            'ExchangeBinarizedDataUnaryUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeBinarizedDataUnaryUnary,
                    request_deserializer=services__pb2.SafetensorDataProto.FromString,
                    response_serializer=services__pb2.SafetensorDataProto.SerializeToString,
            ),
            'ExchangeNumpyDataUnaryUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeNumpyDataUnaryUnary,
                    request_deserializer=services__pb2.TensorProto.FromString,
                    response_serializer=services__pb2.TensorProto.SerializeToString,
            ),
            'ExchangeBinarizedDataStreamUnary': grpc.stream_unary_rpc_method_handler(
                    servicer.ExchangeBinarizedDataStreamUnary,
                    request_deserializer=services__pb2.SafetensorDataProto.FromString,
                    response_serializer=services__pb2.SafetensorDataProto.SerializeToString,
            ),
            'ExchangeNumpyDataStreamUnary': grpc.stream_unary_rpc_method_handler(
                    servicer.ExchangeNumpyDataStreamUnary,
                    request_deserializer=services__pb2.TensorProto.FromString,
                    response_serializer=services__pb2.TensorProto.SerializeToString,
            ),
            'ExchangeBinarizedDataStreamStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ExchangeBinarizedDataStreamStream,
                    request_deserializer=services__pb2.SafetensorDataProto.FromString,
                    response_serializer=services__pb2.SafetensorDataProto.SerializeToString,
            ),
            'ExchangeNumpyDataStreamStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ExchangeNumpyDataStreamStream,
                    request_deserializer=services__pb2.TensorProto.FromString,
                    response_serializer=services__pb2.TensorProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Communicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Communicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PingPong(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Communicator/PingPong',
            services__pb2.Ping.SerializeToString,
            services__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeBinarizedDataUnaryUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Communicator/ExchangeBinarizedDataUnaryUnary',
            services__pb2.SafetensorDataProto.SerializeToString,
            services__pb2.SafetensorDataProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeNumpyDataUnaryUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Communicator/ExchangeNumpyDataUnaryUnary',
            services__pb2.TensorProto.SerializeToString,
            services__pb2.TensorProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeBinarizedDataStreamUnary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Communicator/ExchangeBinarizedDataStreamUnary',
            services__pb2.SafetensorDataProto.SerializeToString,
            services__pb2.SafetensorDataProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeNumpyDataStreamUnary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Communicator/ExchangeNumpyDataStreamUnary',
            services__pb2.TensorProto.SerializeToString,
            services__pb2.TensorProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeBinarizedDataStreamStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Communicator/ExchangeBinarizedDataStreamStream',
            services__pb2.SafetensorDataProto.SerializeToString,
            services__pb2.SafetensorDataProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeNumpyDataStreamStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Communicator/ExchangeNumpyDataStreamStream',
            services__pb2.TensorProto.SerializeToString,
            services__pb2.TensorProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
